import ETS2LA.variables as variables
from ETS2LA.Plugin import *
from ETS2LA.UI import *

import requests
import os

RED = "\033[91m"
NORMAL = "\033[0m"

def DeletePair(Name=""):
    try:
        os.remove(f"{variables.PATH}Data-Collection-End-To-End-Driving/{str(Name)}")
    except:
        pass
    try:
        os.remove(f"{variables.PATH}Data-Collection-End-To-End-Driving/{str(Name).replace('.json', '.png')}")
    except:
        pass    

def CheckForUploads():
    try:
        Response = requests.get("https://cdn.ets2la.com/", timeout=3)
        if Response.status_code != 200:
            raise Exception("Couldn't connect to the server.")
    except:
        return

    CurrentTime = time.perf_counter()
    if os.path.exists(f"{variables.PATH}Data-Collection-End-To-End-Driving") == False:
        os.mkdir(f"{variables.PATH}Data-Collection-End-To-End-Driving")

    for File in os.listdir(f"{variables.PATH}Data-Collection-End-To-End-Driving"):
        if str(File).endswith(".json") and str(File).replace(".json", ".png") not in os.listdir(f"{variables.PATH}Data-Collection-End-To-End-Driving"):
            try:
                os.remove(f"{variables.PATH}Data-Collection-End-To-End-Driving/{str(File)}")
            except:
                pass
        if str(File).endswith(".png") and str(File).replace(".png", ".json") not in os.listdir(f"{variables.PATH}Data-Collection-End-To-End-Driving"):
            try:
                os.remove(f"{variables.PATH}Data-Collection-End-To-End-Driving/{str(File)}")
            except:
                pass

    FilesReadyForUpload = []
    for File in os.listdir(f"{variables.PATH}Data-Collection-End-To-End-Driving"):
        if str(File).endswith(".json"):
            try:
                with open(f"{variables.PATH}Data-Collection-End-To-End-Driving/{str(File)}", "r") as F:
                    Data = json.load(F)

                Time = float(Data["Time"])
                if Time + 604800 < CurrentTime:
                    FilesReadyForUpload.append(str(File))

                # MARK: This can be removed in a few days:
                if "SessionID" not in Data:
                    raise Exception("The data file is missing the 'SessionID' key. Can't upload the data.")

            except:
                DeletePair(Name=File)

    for File in FilesReadyForUpload:
        try:
            print(f"Uploading {File}...")
            Files = [
                ("files", open(f"{variables.PATH}Data-Collection-End-To-End-Driving/{str(File)}", "r")),
                ("files", open(f"{variables.PATH}Data-Collection-End-To-End-Driving/{str(File).replace('.json', '.png')}", "rb"))
            ]
            Response = requests.post(f"https://cdn.ets2la.com/datasets/Glas42/End-To-End/upload/{DataID}", files=Files, timeout=30)
            for F in Files:
                F[1].close()
            if "success" in Response.json():
                DeletePair(Name=File)
                print(f"Uploaded {File}!")
        except:
            DeletePair(Name=File)


def GetDataID():
    DataID = None
    if os.path.exists(f"{variables.PATH}End-To-End-Data-ID.txt"):
        try:
            with open(f"{variables.PATH}End-To-End-Data-ID.txt", "r") as File:
                Content = File.read()
                DataID = Content.replace("\n", "").replace(" ", "").split(">")[0]
        except:
            try:
                os.remove(f"{variables.PATH}End-To-End-Data-ID.txt")
            except:
                pass
            DataID = None
    if DataID == None:
        try:
            Response = requests.get(f"https://cdn.ets2la.com/datasets/Glas42/End-To-End/get-id").json()
            if "success" in Response:
                DataID = Response["success"]
            else:
                raise Exception("Couldn't get an ID from the server.")
        except:
            print(f"\n{RED}Unable to do data collection, couldn't get an response from the server.  The plugin will disable itself.{NORMAL}\n")
            return "None"
        with open(f"{variables.PATH}End-To-End-Data-ID.txt", "w") as File:
            File.write(DataID + """
> DO NOT EDIT THIS FILE <
This is the ID used to request the deletion of your data from the End-To-End Driving dataset.
This ID is not public, you can request to delete all data that was collected with this ID by going to https://cdn.ets2la.com/datasets/Glas42/End-To-End/delete/{your_data_id} or by deleting in the Data Collection End-To-End Driving plugin settings.
If other people get this ID, they can request to delete your data. No personal information is saved with this ID.
If you lose your data ID, you can't request to delete the data collected by you with that ID.
Server side code can be found at https://github.com/ETS2LA/cdn""")
    return DataID


class SettingsMenu(ETS2LASettingsMenu):
    dynamic = True
    plugin_name = "Data Collection End-To-End Driving"
    
    def DeleteDataOnPC(self):
        try:
            SendPopup("Deleting data, could take a while...")
            if os.path.exists(f"{variables.PATH}Data-Collection-End-To-End-Driving"):
                for File in os.listdir(f"{variables.PATH}Data-Collection-End-To-End-Driving"):
                    try:
                        os.remove(f"{variables.PATH}Data-Collection-End-To-End-Driving/{str(File)}")
                    except:
                        pass
            SendPopup("Data deleted successfully!")
        except:
            SendPopup("Couldn't delete the data.")

    def DeleteDataOnServer(self):
        try:
            SendPopup("Deleting data, could take a while...")
            Response = requests.get(f"https://cdn.ets2la.com/datasets/Glas42/End-To-End/delete/{GetDataID()}", timeout=3)
            if "success" in Response.json() and Response.status_code == 200:
                SendPopup("Data deleted successfully!")
            else:
                SendPopup("Couldn't delete the data.")
        except:
            SendPopup("Couldn't delete the data.")

    def render(self):
        Label("Data Collection End-To-End Driving", classname_preset=TitleClassname)
        Label("This plugins sends anonymous driving data for our end-to-end driving model. \nAll the collected data will be available open source on Hugging Face:")
        Label("-> View current datasets on Huggingface", url="https://huggingface.co/Glas42/End-To-End/tree/main/files")
        Separator()
        Label(f"• This plugin will send images of your game window with data like current steering angle or driving speed to our server.\n• If you play your game in windowed mode, the plugin will still only capture the game.\n• The capture of data will be paused when you are currently not actively playing the game, for example when you are currently AFK, paused the game or are not focusing the game window.\n• Be aware that the plugin captures overlays over the game window for example the discord voice channel overlay.\n\nIf you have think that the plugin captured something you don't want in the public dataset, you have 7 days to delete the data before it will be uploaded to our server.\nIf the data is already on the server, you can still delete the data if you still have the ID used to upload the data.\n\nNo personal information is saved with the ID.\nIf you lost your ID, you can't request to delete the data collected with that ID.\nIf other people have your ID, the only thing they can do with it is request to delete your data.")
        with Group("vertical", classname="p-4"):
            Label(f"The data will be saved for the 7 days in this folder on your PC:")
            Label(f"{variables.PATH}Data-Collection-End-To-End-Driving", classname_preset=DescriptionClassname)
            Label(f"Your current ID is:")
            Label(f"{GetDataID()}", classname_preset=DescriptionClassname)
            Label("Manual deletion can be requested by opening this URL in your browser:")
            Label(f"https://cdn.ets2la.com/datasets/Glas42/End-To-End/delete/{GetDataID()}", classname_preset=DescriptionClassname)
        
        ButtonGroup("Delete collected, not yet uploaded data", "This will delete all the data that was collected by the plugin but not yet uploaded to the server.", "Delete", self.DeleteDataOnPC)
        ButtonGroup("Delete collected and uploaded data", "This will delete all the data that was collected by the plugin and already uploaded to the server.", "Delete", self.DeleteDataOnServer)
        Separator()
        Label("Server code can be found at https://github.com/ETS2LA/cdn", classname_preset=DescriptionClassname)
        
        return RenderUI()


class Plugin(ETS2LAPlugin):
    description = PluginDescription(
        name="Data Collection End-To-End Driving",
        version="1.0",
        description="This plugins sends anonymous driving data for our end-to-end driving model. All the collected data will be open source.",
        modules=["TruckSimAPI"],
    )

    author = Author(
        name="Glas42",
        url="https://github.com/Glas42",
        icon="https://avatars.githubusercontent.com/u/145870870?v=4"
    )

    fps_cap = 10
    settings_menu = SettingsMenu()

    def imports(self):
        global SCSTelemetry, ScreenCapture, variables, datetime, requests, json, math, time, cv2, os

        from Modules.TruckSimAPI.main import scsTelemetry as SCSTelemetry
        import Modules.BetterScreenCapture.main as ScreenCapture
        import ETS2LA.variables as variables
        import threading
        import datetime
        import requests
        import random
        import string
        import json
        import math
        import time
        import cv2
        import os

        global DataID
        global SessionID

        global FOVValue
        global TruckSimAPI

        global LastCaptureTime
        global LastCaptureLocation


        # This ID is not public, you can request to delete all data that was collected with this ID by going to https://cdn.ets2la.com/datasets/Glas42/End-To-End/delete/{your_data_id}
        # If other people get this ID, they can request to delete your data. No personal information is saved with this ID.
        # If you lose your data ID, you can't request to delete the data collected by you with that ID.
        # Server side code can be found at https://github.com/ETS2LA/cdn
        DataID = GetDataID()


        # This ID is saved with the data publicly, it's used to make sorting data easier
        SessionID = str("".join(random.choices(str(string.ascii_letters + string.digits + "-_"), k=15)))


        FOVValue = self.globals.settings.FOV
        if FOVValue == None:
            print(f"\n{RED}Make sure to set the FOV in the settings for the 'Data Collection End-To-End Driving' plugin! The plugin will disable itself.{NORMAL}\n")
            self.terminate()

        TruckSimAPI = SCSTelemetry()

        LastCaptureTime = 0
        LastCaptureLocation = 0, 0, 0

        X1, Y1, X2, Y2 = ScreenCapture.GetWindowPosition(Name="Truck Simulator", Blacklist=["Discord"])
        Screen = ScreenCapture.GetScreenIndex((X1 + X2) / 2, (Y1 + Y2) / 2)
        ScreenCapture.Initialize(Screen=Screen - 1, Area=(X1, Y1, X2, Y2))

        threading.Thread(target=CheckForUploads, daemon=True).start()

    def run(self):
        CurrentTime = time.perf_counter()

        global TruckSimAPI

        global LastCaptureTime
        global LastCaptureLocation


        APIDATA = TruckSimAPI.update()

        CurrentLocation = APIDATA["truckPlacement"]["coordinateX"], APIDATA["truckPlacement"]["coordinateY"], APIDATA["truckPlacement"]["coordinateZ"]


        if (CurrentTime - LastCaptureTime < 3 or
            ScreenCapture.IsForegroundWindow(Name="Truck Simulator", Blacklist=["Discord"]) == False or
            APIDATA["sdkActive"] == False or
            APIDATA["pause"] == True or
            math.sqrt((LastCaptureLocation[0] - CurrentLocation[0])**2 + (LastCaptureLocation[1] - CurrentLocation[1])**2 + (LastCaptureLocation[2] - CurrentLocation[2])**2) < 0.5):
            time.sleep(0.2)
            return


        LastCaptureTime = CurrentTime
        LastCaptureLocation = APIDATA["truckPlacement"]["coordinateX"], APIDATA["truckPlacement"]["coordinateY"], APIDATA["truckPlacement"]["coordinateZ"]


        X1, Y1, X2, Y2 = ScreenCapture.GetWindowPosition(Name="Truck Simulator", Blacklist=["Discord"])
        ScreenX, ScreenY, _, _ = ScreenCapture.GetScreenDimensions(ScreenCapture.GetScreenIndex((X1 + X2) / 2, (Y1 + Y2) / 2))
        if ScreenCapture.MonitorX1 != X1 - ScreenX or ScreenCapture.MonitorY1 != Y1 - ScreenY or ScreenCapture.MonitorX2 != X2 - ScreenX or ScreenCapture.MonitorY2 != Y2 - ScreenY:
            ScreenIndex = ScreenCapture.GetScreenIndex((X1 + X2) / 2, (Y1 + Y2) / 2)
            if ScreenCapture.Display != ScreenIndex - 1:
                if ScreenCapture.CaptureLibrary == "WindowsCapture":
                    ScreenCapture.StopWindowsCapture = True
                    while ScreenCapture.StopWindowsCapture == True:
                        time.sleep(0.01)
            MonitorX1, MonitorY1, MonitorX2, MonitorY2 = ScreenCapture.ValidateCaptureArea(ScreenIndex, X1 - ScreenX, Y1 - ScreenY, X2 - ScreenX, Y2 - ScreenY)
            ScreenCapture.Initialize(Screen=ScreenIndex - 1, Area=(MonitorX1, MonitorY1, MonitorX2, MonitorY2))

        Frame = ScreenCapture.Capture(ImageType="cropped")
        if type(Frame) == type(None) or Frame.shape[0] <= 0 or Frame.shape[1] <= 0:
            return


        GameValue = str(APIDATA["scsValues"]["game"]).lower()

        SpeedValue = float(APIDATA["truckFloat"]["speed"])
        SpeedLimitValue = float(APIDATA["truckFloat"]["speedLimit"])
        CruiseControlEnabledValue = bool(APIDATA["truckBool"]["cruiseControl"])
        CruiseControlSpeedValue = float(APIDATA["truckFloat"]["cruiseControlSpeed"])

        SteeringValue = float(APIDATA["truckFloat"]["gameSteer"])
        ThrottleValue = float(APIDATA["truckFloat"]["gameThrottle"])
        BrakeValue = float(APIDATA["truckFloat"]["gameBrake"])
        ClutchValue = float(APIDATA["truckFloat"]["gameClutch"])

        ParkBrakeValue = bool(APIDATA["truckBool"]["parkBrake"])
        WipersValue = bool(APIDATA["truckBool"]["wipers"])
        GearValue = int(APIDATA["truckInt"]["gear"])
        GearsValue = int(APIDATA["configUI"]["gears"])
        ReverseGearsValue = int(APIDATA["configUI"]["gearsReverse"])
        EngineRPMValue = float(APIDATA["truckFloat"]["engineRpm"])

        LeftIndicatorValue = bool(APIDATA["truckBool"]["blinkerLeftActive"])
        RightIndicatorValue = bool(APIDATA["truckBool"]["blinkerRightActive"])
        HazardLightsValue = bool(APIDATA["truckBool"]["lightsHazard"])
        ParkingLightsValue = bool(APIDATA["truckBool"]["lightsParking"])
        LowBeamLightsValue = bool(APIDATA["truckBool"]["lightsBeamLow"])
        HighBeamLightsValue = bool(APIDATA["truckBool"]["lightsBeamHigh"])
        BeaconLightsValue = bool(APIDATA["truckBool"]["lightsBeacon"])
        BrakeLightsValue = bool(APIDATA["truckBool"]["lightsBrake"])
        ReverseLightsValue = bool(APIDATA["truckBool"]["lightsReverse"])

        PositionXValue = float(APIDATA["truckPlacement"]["coordinateX"])
        PositionYValue = float(APIDATA["truckPlacement"]["coordinateY"])
        PositionZValue = float(APIDATA["truckPlacement"]["coordinateZ"])
        RotationXValue = float(APIDATA["truckPlacement"]["rotationX"])
        RotationYValue = float(APIDATA["truckPlacement"]["rotationY"])
        RotationZValue = float(APIDATA["truckPlacement"]["rotationZ"])

        CabinXValue = float(APIDATA["headPlacement"]["cabinOffsetX"] + APIDATA["configVector"]["cabinPositionX"])
        CabinYValue = float(APIDATA["headPlacement"]["cabinOffsetY"] + APIDATA["configVector"]["cabinPositionY"])
        CabinZValue = float(APIDATA["headPlacement"]["cabinOffsetZ"] + APIDATA["configVector"]["cabinPositionZ"])
        CabinRotationXValue = float(APIDATA["headPlacement"]["cabinOffsetrotationX"])
        CabinRotationYValue = float(APIDATA["headPlacement"]["cabinOffsetrotationY"])
        CabinRotationZValue = float(APIDATA["headPlacement"]["cabinOffsetrotationZ"])

        HeadXValue = float(APIDATA["headPlacement"]["headOffsetX"] + APIDATA["configVector"]["headPositionX"] + APIDATA["headPlacement"]["cabinOffsetX"] + APIDATA["configVector"]["cabinPositionX"])
        HeadYValue = float(APIDATA["headPlacement"]["headOffsetY"] + APIDATA["configVector"]["headPositionY"] + APIDATA["headPlacement"]["cabinOffsetY"] + APIDATA["configVector"]["cabinPositionY"])
        HeadZValue = float(APIDATA["headPlacement"]["headOffsetZ"] + APIDATA["configVector"]["headPositionZ"] + APIDATA["headPlacement"]["cabinOffsetZ"] + APIDATA["configVector"]["cabinPositionZ"])
        HeadRotationXValue = float(APIDATA["headPlacement"]["headOffsetrotationX"])
        HeadRotationYValue = float(APIDATA["headPlacement"]["headOffsetrotationY"])
        HeadRotationZValue = float(APIDATA["headPlacement"]["headOffsetrotationZ"])


        Data = {
            "Time": CurrentTime,
            "Date": datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
            "SessionID": SessionID,
            "FOVValue": FOVValue,
            "GameValue": GameValue,
            "SpeedValue": SpeedValue,
            "SpeedLimitValue": SpeedLimitValue,
            "CruiseControlEnabledValue": CruiseControlEnabledValue,
            "CruiseControlSpeedValue": CruiseControlSpeedValue,
            "SteeringValue": SteeringValue,
            "ThrottleValue": ThrottleValue,
            "BrakeValue": BrakeValue,
            "ClutchValue": ClutchValue,
            "ParkBrakeValue": ParkBrakeValue,
            "WipersValue": WipersValue,
            "GearValue": GearValue,
            "GearsValue": GearsValue,
            "ReverseGearsValue": ReverseGearsValue,
            "EngineRPMValue": EngineRPMValue,
            "LeftIndicatorValue": LeftIndicatorValue,
            "RightIndicatorValue": RightIndicatorValue,
            "HazardLightsValue": HazardLightsValue,
            "ParkingLightsValue": ParkingLightsValue,
            "LowBeamLightsValue": LowBeamLightsValue,
            "HighBeamLightsValue": HighBeamLightsValue,
            "BeaconLightsValue": BeaconLightsValue,
            "BrakeLightsValue": BrakeLightsValue,
            "ReverseLightsValue": ReverseLightsValue,
            "PositionXValue": PositionXValue,
            "PositionYValue": PositionYValue,
            "PositionZValue": PositionZValue,
            "RotationXValue": RotationXValue,
            "RotationYValue": RotationYValue,
            "RotationZValue": RotationZValue,
            "CabinXValue": CabinXValue,
            "CabinYValue": CabinYValue,
            "CabinZValue": CabinZValue,
            "CabinRotationXValue": CabinRotationXValue,
            "CabinRotationYValue": CabinRotationYValue,
            "CabinRotationZValue": CabinRotationZValue,
            "HeadXValue": HeadXValue,
            "HeadYValue": HeadYValue,
            "HeadZValue": HeadZValue,
            "HeadRotationXValue": HeadRotationXValue,
            "HeadRotationYValue": HeadRotationYValue,
            "HeadRotationZValue": HeadRotationZValue
        }


        if os.path.exists(f"{variables.PATH}Data-Collection-End-To-End-Driving") == False:
            os.mkdir(f"{variables.PATH}Data-Collection-End-To-End-Driving")

        Name = str(CurrentTime)

        with open(f"{variables.PATH}Data-Collection-End-To-End-Driving/{Name}.json", "w") as F:
            json.dump(Data, F, indent=4)

        cv2.imwrite(f"{variables.PATH}Data-Collection-End-To-End-Driving/{Name}.png", Frame)